{"version":3,"sources":["views/Box3D.jsx","App.js","reportWebVitals.js","index.js"],"names":["Box","props","useBox","mass","position","castShadow","attach","args","color","Box3D","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","rotation","Math","PI","receiveShadow","opacity","OrbitControls","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAMA,SAASA,EAAIC,GACX,MAAmBC,aAAO,iBAAO,CAAEC,KAAM,EAAGC,SAAU,CAAC,EAAG,EAAG,OAA7D,6BACA,OACE,uBAAMC,YAAU,EAAhB,UACE,mCAAmBC,OAAO,WAAWC,KAAM,CAAC,EAAG,EAAG,KAClD,qCAAqBD,OAAO,WAAWE,MAAM,eA2DpCC,MArCf,WACE,OACE,eAAC,IAAD,WACE,kCACEJ,YAAU,EACVD,SAAU,CAAC,EAAG,GAAI,GAClBM,UAAW,IACXC,uBAAsB,KACtBC,wBAAuB,KACvBC,oBAAmB,GACnBC,sBAAqB,GACrBC,sBAAqB,GACrBC,oBAAmB,GACnBC,wBAAuB,KAEzB,4BAAYb,SAAU,EAAE,GAAI,GAAI,IAAKM,UAAW,KAChD,4BAAYN,SAAU,CAAC,GAAI,GAAI,GAAIM,UAAW,MAC9C,8BAAcA,UAAW,KAEzB,eAAC,IAAD,WACE,cAACV,EAAD,IAEA,uBACEkB,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,GAC5BhB,SAAU,CAAC,GAAI,EAAG,GAClBiB,eAAa,EAHf,UAKE,qCAAqBf,OAAO,WAAWC,KAAM,CAAC,IAAK,OACnD,gCAAgBD,OAAO,WAAWgB,QAAS,WAI/C,cAACC,EAAA,EAAD,QClDSC,MAbf,WACE,OAQE,aAPA,CAOC,EAAD,KCCWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c399813b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\nimport { OrbitControls, Stars, Sky } from \"@react-three/drei\";\r\nimport { Physics, usePlane, useBox } from \"@react-three/cannon\";\r\nimport \"../styles/box3d.css\";\r\n\r\nfunction Box(props) {\r\n  const [ref, api] = useBox(() => ({ mass: 1, position: [0, 2, 0] }));\r\n  return (\r\n    <mesh castShadow>\r\n      <boxBufferGeometry attach=\"geometry\" args={[2, 2, 2]} />\r\n      <meshLambertMaterial attach=\"material\" color=\"hotpink\" />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Plane(props) {\r\n  const [ref] = usePlane(() => ({\r\n    rotation: [-Math.PI / 2, 0, 0],\r\n  }));\r\n  return (\r\n    <mesh\r\n      rotation={[-Math.PI / 2, 0, 0]}\r\n      position={[0, -3, 0]}\r\n      color=\"white\"\r\n      receiveShadow\r\n    >\r\n      <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\r\n      <shadowMaterial attach=\"material\" color=\"lightblue\" opacity={0.3} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Box3D() {\r\n  return (\r\n    <Canvas>\r\n      <directionalLight\r\n        castShadow\r\n        position={[0, 10, 0]}\r\n        intensity={1.5}\r\n        shadow-mapSize-width={1024}\r\n        shadow-mapSize-height={1024}\r\n        shadow-camera-far={50}\r\n        shadow-camera-left={-10}\r\n        shadow-camera-right={10}\r\n        shadow-camera-top={10}\r\n        shadow-camera-bottom={-10}\r\n      />\r\n      <pointLight position={[-10, 0, -20]} intensity={0.5} />\r\n      <pointLight position={[0, -10, 0]} intensity={1.5} />\r\n      <ambientLight intensity={0.2} />\r\n\r\n      <Physics>\r\n        <Box />\r\n\r\n        <mesh\r\n          rotation={[-Math.PI / 2, 0, 0]}\r\n          position={[0, -3, 0]}\r\n          receiveShadow\r\n        >\r\n          <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\r\n          <shadowMaterial attach=\"material\" opacity={0.3} />\r\n        </mesh>\r\n      </Physics>\r\n\r\n      <OrbitControls />\r\n    </Canvas>\r\n  );\r\n}\r\n\r\nexport default Box3D;\r\n","import Box3D from './views/Box3D';\n\nfunction App() {\n  return (\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <p>Hello</p>\n    //   </header>\n      \n    // </div>\n\n    <Box3D></Box3D>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}