{"version":3,"sources":["views/Box3D.jsx","App.js","reportWebVitals.js","index.js"],"names":["Box","props","mesh","useRef","useState","isHovered","isActive","state","setState","useFrame","time","clock","getElapsedTime","current","position","y","Math","sin","rotation","x","ref","scale","onClick","e","onPointerOver","onPointerOut","castShadow","attach","args","color","Plane","usePlane","PI","receiveShadow","Box3D","intensity","angle","penumbra","Stars","OrbitControls","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAMA,SAASA,EAAIC,GACX,IAAMC,EAAOC,mBACb,EAA0BC,mBAAS,CAAEC,WAAW,EAAOC,UAAU,IAAjE,mBAAOC,EAAP,KAAcC,EAAd,KASA,OAPAC,aAAS,SAACF,GACR,IAAMG,EAAOH,EAAMI,MAAMC,iBACzBV,EAAKW,QAAQC,SAASC,EACpBb,EAAKW,QAAQC,SAASC,EAAIC,KAAKC,IAAW,EAAPP,GAAY,IACjDR,EAAKW,QAAQK,SAASH,EAAIb,EAAKW,QAAQK,SAASC,GAAK,OAIrD,iDACMlB,GADN,IAEEmB,IAAKlB,EACLmB,MAAOd,EAAMF,UAAY,CAAC,IAAK,IAAK,KAAO,CAAC,EAAG,EAAG,GAClDiB,QAAS,SAACC,GAAD,OAAOf,EAAS,2BAAKD,GAAN,IAAaD,UAAWC,EAAMD,aACtDkB,cAAe,SAACD,GAAD,OAAOf,EAAS,2BAAKD,GAAN,IAAaF,WAAW,MACtDoB,aAAc,SAACF,GAAD,OAAOf,EAAS,2BAAKD,GAAN,IAAaF,WAAW,MACrDqB,YAAU,EAPZ,UASE,mCAAmBC,OAAO,WAAWC,KAAM,CAAC,EAAG,EAAG,KAClD,qCACED,OAAO,WACPE,MAAOtB,EAAMD,SAAW,UAAY,gBAM5C,SAASwB,EAAM7B,GACb,MAAc8B,aAAS,iBAAO,CAC5Bb,SAAU,EAAEF,KAAKgB,GAAK,EAAG,EAAG,OAD9B,oBAGA,OACE,uBACEd,SAAU,EAAEF,KAAKgB,GAAK,EAAG,EAAG,GAC5BlB,SAAU,CAAC,GAAI,EAAG,GAClBe,MAAM,QACNI,eAAa,EAJf,UAME,qCAAqBN,OAAO,WAAWC,KAAM,CAAC,IAAK,OACnD,qCAAqBD,OAAO,WAAWE,MAAM,aAuBpCK,MAlBf,WACE,OACE,eAAC,IAAD,WACE,8BAAcC,UAAW,KACzB,2BAAWrB,SAAU,CAAC,EAAG,EAAG,GAAIsB,MAAO,IAAMC,SAAU,IACvD,4BAAYvB,SAAU,CAAC,EAAG,EAAG,KAE7B,eAAC,IAAD,WACE,cAACwB,EAAA,EAAD,IACA,cAACtC,EAAD,CAAKc,SAAU,CAAC,EAAG,EAAG,KACtB,cAACgB,EAAD,OAGF,cAACS,EAAA,EAAD,QCnDSC,MAbf,WACE,OAQE,aAPA,CAOC,EAAD,KCCWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.52836c44.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport { Canvas, useFrame } from \"@react-three/fiber\";\r\nimport { OrbitControls, Stars, Sky } from \"@react-three/drei\";\r\nimport { Physics, usePlane, useBox } from \"@react-three/cannon\";\r\nimport \"../styles/box3d.css\";\r\n\r\nfunction Box(props) {\r\n  const mesh = useRef();\r\n  const [state, setState] = useState({ isHovered: false, isActive: false });\r\n\r\n  useFrame((state) => {\r\n    const time = state.clock.getElapsedTime();\r\n    mesh.current.position.y =\r\n      mesh.current.position.y + Math.sin(time * 2) / 100;\r\n    mesh.current.rotation.y = mesh.current.rotation.x += 0.01;\r\n  });\r\n\r\n  return (\r\n    <mesh\r\n      {...props}\r\n      ref={mesh}\r\n      scale={state.isHovered ? [1.5, 1.5, 1.5] : [1, 1, 1]}\r\n      onClick={(e) => setState({ ...state, isActive: !state.isActive })}\r\n      onPointerOver={(e) => setState({ ...state, isHovered: true })}\r\n      onPointerOut={(e) => setState({ ...state, isHovered: false })}\r\n      castShadow\r\n    >\r\n      <boxBufferGeometry attach=\"geometry\" args={[2, 2, 2]} />\r\n      <meshLambertMaterial\r\n        attach=\"material\"\r\n        color={state.isActive ? \"#820263\" : \"#D90368\"}\r\n      />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Plane(props) {\r\n  const [ref] = usePlane(() => ({\r\n    rotation: [-Math.PI / 2, 0, 0],\r\n  }));\r\n  return (\r\n    <mesh\r\n      rotation={[-Math.PI / 2, 0, 0]}\r\n      position={[0, -3, 0]}\r\n      color=\"white\"\r\n      receiveShadow\r\n    >\r\n      <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\r\n      <meshLambertMaterial attach=\"material\" color=\"white\" />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Box3D() {\r\n  return (\r\n    <Canvas>\r\n      <ambientLight intensity={0.5} />\r\n      <spotLight position={[2, 2, 2]} angle={0.15} penumbra={1} />\r\n      <pointLight position={[4, 4, 4]} />\r\n\r\n      <Physics>\r\n        <Stars />\r\n        <Box position={[0, 0, 0]} />\r\n        <Plane />\r\n      </Physics>\r\n\r\n      <OrbitControls />\r\n    </Canvas>\r\n  );\r\n}\r\n\r\nexport default Box3D;\r\n","import Box3D from './views/Box3D';\n\nfunction App() {\n  return (\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <p>Hello</p>\n    //   </header>\n      \n    // </div>\n\n    <Box3D></Box3D>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}